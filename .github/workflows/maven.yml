# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#RAJ

name: Java CI with Maven

on:
  push:
  pull_request:
      branches:
        - main
    

jobs:
  lint:
    name: Lint
    
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    # - name: Lint
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   uses: super-linter/super-linter@v7.1.0
    - name: Check JAVA / Maven
      run: |
        java -version
        mvn -v
    
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Set up JDK 17
  #     uses: actions/setup-java@v4
  #     with:
  #       java-version: '17'
  #       distribution: 'temurin'
  #       cache: maven
  #   - name: Build with Maven
  #     run: mvn -B package --file pom.xml
###
  build:
    runs-on: ubuntu-latest

    steps:
    #Checkout the code
    - uses: actions/checkout@v4

    #Set up Java with built-in Maven cache
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    #Build project and run all tests
    - name: Build and Test with Maven
      run: mvn clean install

    # #(Optional) Upload test reports (if needed)
    # - name: Archive test reports
    #   if: always()
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: test-reports
    #     path: target/surefire-reports/

    # #(Optional) Code style check with Checkstyle (if configured)
    # - name: Run Checkstyle
    #   run: mvn checkstyle:check

    # # (Optional) Code coverage report with JaCoCo (if configured)
    # - name: Generate JaCoCo Coverage Report
    #   run: mvn test jacoco:report
